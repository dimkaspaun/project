---
### Percona 

- name: Install packages
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - https://repo.percona.com/yum/percona-release-latest.noarch.rpm
    - Percona-Server-server-57
    - MySQL-python

- name: Copy MySQL configs
  copy:
    src: "files/conf.d/"
    dest: "{{ mysql_config_dir }}/"
    owner: root
    group: root
    mode: '0644'

- name: start mysqld
  systemd:
    name: mysql
    state: started
    enabled: yes

- name: Get temporary generated root password
  shell: grep 'root@localhost:' /var/log/mysqld.log | awk '{print $11}'
  register: temporary_root_password
  args:
    creates: "{{ mysql_root_mycnf_path }}"

- name: Update root password
  shell: >
    mysql -uroot -p'{{ temporary_root_password.stdout }}' --connect-expired-password
    -e "ALTER USER USER() IDENTIFIED BY '{{ mysql_root_password }}';"
  args:
    creates: "{{ mysql_root_mycnf_path }}"

- name: Copy root my.cnf file
  template:
    src: my.cnf.j2
    dest: "{{ mysql_root_mycnf_path }}"
    owner: root
    group: root
    mode: '0600'

- name: Create database
  mysql_db:
    name: "{{ mysql_db_name }}"
    state: present


- name: Config Master
  block:
    - name: Create user for replication
      mysql_user:
        name: "{{ mysql_replication_user }}"
        password: "{{ mysql_replication_user_password }}"
        priv: "{{ mysql_replication_user_privilege }}"
        host: '%'
        state: present

    - name: create mysql client user
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_user_password }}"
        priv: '*.*:ALL,GRANT'
        host: '%'
        state: present
      no_log: true      

    - name: Removes all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
      no_log: true   

    - name: test database is absent
      mysql_db:
        name: test
        state: absent        

    - name: Create database dump
      mysql_db:
        state: dump
        name: all
        target: "{{ mysql_replication_dump_path }}"
      
    - name: Pull dump file from master to host
      fetch:
        src: "{{ mysql_replication_dump_path }}"
        dest: "{{ mysql_replication_dump_path }}"
        flat: yes
  when: ansible_hostname == 'mysqlmaster'       

- name: Config Slave 
  block:

    - name: 'Config base.cnf'
      lineinfile:
        path:  "{{ mysql_replication_config_base }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^server-id = 1', line: 'server-id = 2'}
      notify:
        - restart mysqld            

    - name: Push dump file from host to slave
      copy:
        src: "{{ mysql_replication_dump_path }}"
        dest: "{{ mysql_replication_dump_path }}"


    - name: reset master
      shell: mysql -e "reset master;"

    - name: restore database
      mysql_db:
        name: "{{ mysql_db_name }}"
        state: import
        target: "{{ mysql_replication_dump_path }}"

    - name: Change master to host "master"
      mysql_replication:
        mode: changemaster
        master_host: "{{ mysql_master_ip }}"
        master_port: "{{ mysql_master_port }}"
        master_user: "{{ mysql_master_user }}"
        master_password: "{{ mysql_master_password }}"
        master_auto_position: "{{ mysql_master_auto_position }}"

    - name: Start slave
      mysql_replication:
        mode: startslave      
  when: ansible_hostname == 'mysqlslave'  


### Firewall 

- name: 'Enable MySQL in Firewalld'
  firewalld:
    service: mysql
    permanent: yes
    state: enabled 

- name: 'Reload Firewalld'
  systemd:
    name: firewalld
    state: reloaded 